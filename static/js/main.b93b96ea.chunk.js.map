{"version":3,"sources":["ui/Table.module.css","ui/Table.tsx","dal/api.ts","bll/dataReducer.ts","common/Constants.ts","ui/TableContainer.tsx","ui/App.tsx","serviceWorker.ts","bll/store.ts","index.tsx"],"names":["module","exports","Table","keys","values","timestamp","base","newKeys","map","key","newValues","value","instance","axios","create","baseURL","dataApi","get","then","res","data","catch","e","console","log","initialState","valid","rates","dataReducer","state","action","type","TableContainer","useState","timerDone","setTimerDone","dispatch","useDispatch","useEffect","setTimeout","a","useSelector","reducer","Object","Number","className","s","wait","App","Boolean","window","location","hostname","match","rootReducer","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"2HACAA,EAAOC,QAAU,CAAC,KAAO,sB,0JC4BVC,EArBsB,SAAC,GAAqC,IAApCC,EAAmC,EAAnCA,KAAMC,EAA6B,EAA7BA,OAAQC,EAAqB,EAArBA,UAAWC,EAAU,EAAVA,KAEtDC,EAAUJ,EAAKK,KAAI,SAAAC,GAAG,OAAE,6BAAMA,MAC9BC,EAAYN,EAAOI,KAAI,SAAAG,GAAK,OAAE,6BAAMA,MAE1C,OACI,+BACI,4CAAkBN,EAAlB,MACA,uCAAaC,EAAb,MACA,yCACA,4BACI,oCACA,sCAEJ,4BACI,4BAAKC,GACL,4BAAKG,M,uCCtBfE,E,OAAWC,EAAMC,OAAO,CAC1BC,QAAS,+BAGAC,EAAU,WAEf,OAAOJ,EAASK,IAAI,IACfC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,QAChBC,OAAO,SAAAC,GAAMC,QAAQC,IAAIF,OCLhCG,EAAoB,CACtBL,KACI,CACIf,UAAW,EACXC,KAAM,GACNoB,OAAO,EACPC,MAAO,CAAC,GAAM,KAeXC,EAXK,WAA+D,IAA9DC,EAA6D,uDAAnCJ,EAAcK,EAAqB,uCAC9E,OAAQA,EAAOC,MACX,ICjBwB,2BDkBpB,OAAO,2BACAF,GADP,IACcT,KAAMU,EAAOV,OAG/B,QACI,OAAOS,I,wBEcJG,EA9BQ,WAAO,IAAD,EAESC,oBAAS,GAFlB,mBAElBC,EAFkB,KAEPC,EAFO,KAInBC,EAAWC,cAEjBC,qBAAU,WACDZ,GAAOa,YAAW,WACnBJ,GAAa,KACd,KACHC,EFae,uCAAM,WAAOA,GAAP,eAAAI,EAAA,+EAELxB,IAFK,OAEjBG,EAFiB,OAGrBiB,EALkF,CAACL,KC5B3D,2BD4BmFX,KAKtED,IAHhB,gDAKrBI,QAAQC,IAAR,MALqB,yDAAN,yDEZhB,IAEH,IAAME,EAAQe,aAAY,SAACZ,GAAD,OAAyBA,EAAMa,QAAQtB,KAAKM,SAChEvB,EAAOsC,aAAY,SAACZ,GAAD,OAAyBc,OAAOxC,KAAK0B,EAAMa,QAAQtB,KAAKO,UAC3EvB,EAASqC,aAAY,SAACZ,GAAD,OAAyBc,OAAOvC,OAAOyB,EAAMa,QAAQtB,KAAKO,OAAOnB,KAAI,SAAAG,GAAK,OAAIiC,OAAOjC,SAC1GN,EAAYoC,aAAY,SAACZ,GAAD,OAAyBA,EAAMa,QAAQtB,KAAKf,aACpEC,EAAOmC,aAAY,SAACZ,GAAD,OAAyBA,EAAMa,QAAQtB,KAAKd,QAErE,OACI,oCACK4B,EACK,kBAAC,EAAD,CAAO5B,KAAMA,EAAMD,UAAWA,EAAWF,KAAMA,EAAMC,OAAQA,IAC7D,yBAAKyC,UAAWC,IAAEC,MAAlB,YCpBHC,MANf,WACI,OACI,kBAAC,EAAD,OCMYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mBCdFC,EAAcC,YAAgB,CAC9Bb,QAAQd,IAKC4B,EAAQC,YAAYH,EAAaI,YAAgBC,MCF9DC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,IAAD,CAAUN,MAAOA,GACb,kBAAC,EAAD,QAGRO,SAASC,eAAe,SF6HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjD,MAAK,SAAAkD,GACJA,EAAaC,gBAEdhD,OAAM,SAAAiD,GACL/C,QAAQ+C,MAAMA,EAAMC,c","file":"static/js/main.b93b96ea.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wait\":\"Table_wait__3Fgei\"};","import React from \"react\";\r\nimport './App.css';\r\ntype OwnPropsType = {\r\n    keys:string[],\r\n    values: number[],\r\n    timestamp:number,\r\n    base:string\r\n}\r\nconst Table:React.FC<OwnPropsType> = ({keys, values, timestamp, base}) => {\r\n\r\n    const newKeys = keys.map(key=><div>{key}</div>)\r\n    const newValues = values.map(value=><div>{value}</div>)\r\n\r\n    return(\r\n        <table>\r\n            <span>timestamp: {timestamp}, </span>\r\n            <span>base: {base}, </span>\r\n            <span>rates: </span>\r\n            <tr>\r\n                <th>name</th>\r\n                <th>price</th>\r\n            </tr>\r\n            <tr>\r\n                <td>{newKeys}</td>\r\n                <td>{newValues}</td>\r\n            </tr>\r\n        </table>\r\n    )\r\n}\r\nexport default Table\r\n","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"http://localhost:3004/data\",\r\n})\r\n\r\nexport const dataApi = {\r\n    getData() {\r\n        return instance.get('')\r\n            .then(res => res.data)\r\n            .catch( e => {console.log(e)})\r\n    }\r\n}\r\n\r\n","import {dataApi} from \"../dal/api\";\r\nimport {GET_DATA_SUCCESS} from \"../common/Constants\";\r\nimport {dataType, getDataSuccessActionCreatorType, initialStateType} from \"../common/types\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nconst initialState: any = {\r\n    data:\r\n        {\r\n            timestamp: 0,\r\n            base: '',\r\n            valid: false,\r\n            rates: {\"yo\": 1}\r\n        }\r\n}\r\n\r\nconst dataReducer = (state: initialStateType = initialState, action: any): any => {\r\n    switch (action.type) {\r\n        case GET_DATA_SUCCESS: {\r\n            return {\r\n                ...state, data: action.data\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport default dataReducer\r\n\r\nconst getDataSuccessActionCreator = (data: dataType): getDataSuccessActionCreatorType => ({type: GET_DATA_SUCCESS, data})\r\n\r\nexport const getData = () => async (dispatch: Dispatch<getDataSuccessActionCreatorType>) => {\r\n    try {\r\n        let res = await dataApi.getData()\r\n        dispatch(getDataSuccessActionCreator(res))\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n\r\n}\r\n","export const GET_DATA_SUCCESS = 'reducer/GET-DATA-SUCCESS'\r\n","import React, {useEffect, useState} from \"react\";\r\nimport Table from \"./Table\";\r\nimport {getData} from \"../bll/dataReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../bll/store\";\r\nimport s from './Table.module.css'\r\n\r\nconst TableContainer = () => {\r\n\r\n    const [timerDone, setTimerDone] = useState(false);\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (!valid) setTimeout(() => {\r\n            setTimerDone(true);\r\n        }, 1000)\r\n        dispatch(getData())\r\n    }, [])\r\n\r\n    const valid = useSelector((state: AppStateType) => state.reducer.data.valid)\r\n    const keys = useSelector((state: AppStateType) => Object.keys(state.reducer.data.rates))\r\n    const values = useSelector((state: AppStateType) => Object.values(state.reducer.data.rates).map(value => Number(value)))\r\n    const timestamp = useSelector((state: AppStateType) => state.reducer.data.timestamp)\r\n    const base = useSelector((state: AppStateType) => state.reducer.data.base)\r\n\r\n    return (\r\n        <>\r\n            {timerDone\r\n                ? <Table base={base} timestamp={timestamp} keys={keys} values={values}/>\r\n                : <div className={s.wait}>wait..</div>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default TableContainer\r\n","import React from 'react';\nimport './App.css';\nimport TableContainer from \"./TableContainer\";\n\nfunction App() {\n    return (\n        <TableContainer/>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport dataReducer from \"./dataReducer\";\r\n\r\nlet rootReducer = combineReducers({\r\n    reducer:dataReducer\r\n})\r\ntype RootReducerType = typeof rootReducer\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './ui/App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport {store} from \"./bll/store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}